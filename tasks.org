* Notes
** when starting emacs
   ido mode
   erc fill mode
   set black

** Set precision
  Sets the precision to be used by output operations as by a call to stream's member precision(n)
  The precision determines the maximum number of digits that shall be output on insertion operations to express floating-point values, counting both the digits before and after the decimal point.
  You must include <iomanip> to use this manipulator.

** end-of-file
    = ctrl-d

** Emacs keybindings

-c = compile
-o = link
-clear buffers c-x 1
-save  c-x c-s
-split vertical c-x 3
-split horizontal c-x 2
-directory c-x c-d
-compiling c-c c
-shell M-x shell
-change buffers c-x b
-close buffer c-x k
-exit emacs c-x c-c
-undo c-x u
-search: c-s
-copy: select with arrows the m-w
-paste: m-y
-delete line: c-k
-clock in: c-c c-x c-i
-clock out: c-c c-x c-o
-update clock grid c-c c-c
--not emacs -- highlight, then middleclick to paste highlighted content

* Tasks

#+begin: clocktable :maxlevel 3 :scope subtree :indent nil :emphasize nil :scope file :narrow 75 :formula %
#+CAPTION: Clock summary at [2018-01-10 Wed 10:19]
| <75>                                                                        |         |      |   |       |
| Headline                                                                    | Time    |      |   |     % |
|-----------------------------------------------------------------------------+---------+------+---+-------|
| *Total time*                                                                | *11:04* |      |   | 100.0 |
|-----------------------------------------------------------------------------+---------+------+---+-------|
| Tasks                                                                       | 11:04   |      |   | 100.0 |
| Setup CMake                                                                 |         | 0:44 |   |   6.6 |
| frame name program 1                                                        |         | 0:20 |   |   3.0 |
| frame loop program                                                          |         | 0:37 |   |   5.6 |
| grade task                                                                  |         | 2:32 |   |  22.9 |
| build boost                                                                 |         | 1:03 |   |   9.5 |
| chapter 4                                                                   |         | 1:05 |   |   9.8 |
| building boost and witty again                                              |         | 0:14 |   |   2.1 |
| witty hello                                                                 |         | 1:52 |   |  16.9 |
| witty add                                                                   |         | 2:37 |   |  23.6 |
#+TBLFM: $5='(org-clock-time% @3$2 $2..$4);%.1f
#+end

** Setup CMake
   CLOCK: [2018-01-04 Thu 13:31]--[2018-01-04 Thu 14:15] =>  0:44

- link to tutorial: http://derekmolloy.ie/hello-world-introductions-to-cmake/

** frame name program 1
   CLOCK: [2018-01-05 Fri 13:30]--[2018-01-05 Fri 13:50] =>  0:20
   chapter 1 in book
   project1 file

** frame loop program
   CLOCK: [2018-01-08 Mon 9:30]--[2018-01-08 Mon 10:07] =>  0:37
   chapter 2 in book
   project2 file
** grade task
   CLOCK: [2018-01-08 Mon 11:30]--[2018-01-08 Mon 14:02] =>  2:32
   chapter 3 in book
   gradeproj file

** build boost
   CLOCK: [2018-01-08 Mon 13:00]--[2018-01-08 Mon 14:03] =>  1:03

1. copy files from green USB key for boost and wt. copy them into ~/Development.
2. unpack boost:

tar -xaf boost_1_66_0.tar.bz2

3. build boost:

cd boost_1_66_0/
./bootstrap.sh
./b2 --prefix=/home/marco/local
./b2 --prefix=/home/marco/local --install

replace "marco" with your username, here and on all other commands below.

4. when boost is finished, you can start with witty. unpack witty:

tar -xaf witty-4.0.2.tar.gz

5. build witty:

cd wt-4.0.2
export CMAKE_INCLUDE_PATH=/home/marco/local/include
export CMAKE_LIBRARY_PATH=/home/marco/local/lib
mkdir build
cd build
cmake ..
make -j 4
make install

6. create a new project, and add the following to the CMake file (in
addition to what you normally add) add the following:

6.1 after the project:

find_package(Wt REQUIRED)

6.2 after the target (e.g. the line with target_link_libraries):

target_link_libraries(PROJECT ${Wt_LIBRARIES})

7. manually copy the contents of this file:

https://www.webtoolkit.eu/wt/src/hello

8. build and run it. you need to run it with the following parameters:

./PROJECT  --docroot . --http-address 0.0.0.0 --http-port 8080

9. go to chrome and type:

http://localhost:8080

if all goes well you should see the hello world.

** chapter 4
   CLOCK: [2018-01-09 Tue 09:56]--[2018-01-09 Tue 11:01] =>  1:05
** building boost and witty again
   CLOCK: [2018-01-09 Tue 11:01]--[2018-01-09 Tue 11:15] =>  0:14
** witty hello
   CLOCK: [2018-01-09 Tue 13:30]--[2018-01-09 Tue 14:44] =>  1:14
   CLOCK: [2018-01-09 Tue 11:16]--[2018-01-09 Tue 11:54] =>  0:38
   Changed text, changed button margin, added fullstop after response ( + ".")

compile:
cd /home/niam/Development/myproject/hellowt2/build && CMAKE_INCLUDE_PATH=/home/niam/local/include CMAKE_LIBRARY_PATH=/home/niam/local/lib cmake .. && make

  to run ./hello --docroot . --http-listen 0.0.0.0:8080/

** witty add
   CLOCK: [2018-01-10 Wed 09:13]--[2018-01-10 Wed 10:17] =>  1:04
   CLOCK: [2018-01-09 Tue 20:12]--[2018-01-09 Tue 20:47] =>  0:35
   CLOCK: [2018-01-09 Tue 15:00]--[2018-01-09 Tue 15:58] =>  0:58
"stoi changes string to int, to_string converts int to string"
